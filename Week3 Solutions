#876. Middle of the Linked List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None:
            return None
        
        slow = head
        fast = head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow 

#25. Reverse Nodes in k-Group
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverse(self,head: ListNode, tail: ListNode):
        pre = tail.next 
        p = head 
        while pre != tail:
            tmp = p.next 
            p.next = pre 
            pre = p 
            p = tmp
        return tail,head

    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        fir = ListNode(0)
        fir.next = head 
        pre = fir 
        while head:
            tail = pre 
            for i in range(k):
                tail = tail.next 
                if not tail:
                    return fir.next 
            nex = tail.next 
            head,tail = self.reverse(head,tail)
            pre.next = head 
            tail.next = nex 
            pre = tail 
            head = tail.next 
        return fir.next  

#36. ValidSudoku
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # 0: row, 1: column, 2: square
        record = {0:defaultdict(set), 1:defaultdict(set), 2:defaultdict(set)}
        n = 9
        m = 3
        for i in range(n):
            for j in range(n):
                if board[i][j] == '.':
                    continue
                if board[i][j] in record[0][i] or board[i][j] in record[1][j]:
                    return False
                sq = i // m * m + j // m
                if board[i][j] in record[2][sq]:
                    return False
                record[0][i].add(board[i][j])
                record[1][j].add(board[i][j])
                record[2][sq].add(board[i][j])
        return True

       
